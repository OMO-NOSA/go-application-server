// Package controllers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package controllers

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	Api_keyScopes             = "api_key.Scopes"
	Meetingvisitor_authScopes = "meetingvisitor_auth.Scopes"
)

// Defines values for MeetingStatus.
const (
	MeetingStatusAvailable MeetingStatus = "available"
	MeetingStatusPending   MeetingStatus = "pending"
	MeetingStatusSold      MeetingStatus = "sold"
)

// Defines values for FindmeetingsByStatusParamsStatus.
const (
	FindmeetingsByStatusParamsStatusAvailable FindmeetingsByStatusParamsStatus = "available"
	FindmeetingsByStatusParamsStatusPending   FindmeetingsByStatusParamsStatus = "pending"
	FindmeetingsByStatusParamsStatusSold      FindmeetingsByStatusParamsStatus = "sold"
)

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Category defines model for Category.
type Category struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Tag defines model for Tag.
type Tag struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	Id        *int64  `json:"id,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Password  *string `json:"password,omitempty"`
	Phone     *string `json:"phone,omitempty"`

	// UserStatus User Status
	UserStatus *int32  `json:"userStatus,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// Meeting defines model for meeting.
type Meeting struct {
	Category  *Category `json:"category,omitempty"`
	Id        *int64    `json:"id,omitempty"`
	Name      string    `json:"name"`
	PhotoUrls []string  `json:"photoUrls"`

	// Status meeting status in the visitor
	Status *MeetingStatus `json:"status,omitempty"`
	Tags   *[]Tag         `json:"tags,omitempty"`
}

// MeetingStatus meeting status in the visitor
type MeetingStatus string

// FindmeetingsByStatusParams defines parameters for FindmeetingsByStatus.
type FindmeetingsByStatusParams struct {
	// Status Status values that need to be considered for filter
	Status *FindmeetingsByStatusParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// FindmeetingsByStatusParamsStatus defines parameters for FindmeetingsByStatus.
type FindmeetingsByStatusParamsStatus string

// FindmeetingsByTagsParams defines parameters for FindmeetingsByTags.
type FindmeetingsByTagsParams struct {
	// Tags Tags to filter by
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`
}

// DeletemeetingParams defines parameters for Deletemeeting.
type DeletemeetingParams struct {
	ApiKey *string `json:"api_key,omitempty"`
}

// UpdatemeetingWithFormParams defines parameters for UpdatemeetingWithForm.
type UpdatemeetingWithFormParams struct {
	// Name Name of meeting that needs to be updated
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Status Status of meeting that needs to be updated
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// UploadFileParams defines parameters for UploadFile.
type UploadFileParams struct {
	// AdditionalMetadata Additional Metadata
	AdditionalMetadata *string `form:"additionalMetadata,omitempty" json:"additionalMetadata,omitempty"`
}

// CreateUsersWithListInputJSONBody defines parameters for CreateUsersWithListInput.
type CreateUsersWithListInputJSONBody = []User

// LoginUserParams defines parameters for LoginUser.
type LoginUserParams struct {
	// Username The user name for login
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Password The password for login in clear text
	Password *string `form:"password,omitempty" json:"password,omitempty"`
}

// AddmeetingJSONRequestBody defines body for Addmeeting for application/json ContentType.
type AddmeetingJSONRequestBody = Meeting

// AddmeetingFormdataRequestBody defines body for Addmeeting for application/x-www-form-urlencoded ContentType.
type AddmeetingFormdataRequestBody = Meeting

// UpdatemeetingJSONRequestBody defines body for Updatemeeting for application/json ContentType.
type UpdatemeetingJSONRequestBody = Meeting

// UpdatemeetingFormdataRequestBody defines body for Updatemeeting for application/x-www-form-urlencoded ContentType.
type UpdatemeetingFormdataRequestBody = Meeting

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = User

// CreateUserFormdataRequestBody defines body for CreateUser for application/x-www-form-urlencoded ContentType.
type CreateUserFormdataRequestBody = User

// CreateUsersWithListInputJSONRequestBody defines body for CreateUsersWithListInput for application/json ContentType.
type CreateUsersWithListInputJSONRequestBody = CreateUsersWithListInputJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = User

// UpdateUserFormdataRequestBody defines body for UpdateUser for application/x-www-form-urlencoded ContentType.
type UpdateUserFormdataRequestBody = User

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AddmeetingWithBody request with any body
	AddmeetingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Addmeeting(ctx context.Context, body AddmeetingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddmeetingWithFormdataBody(ctx context.Context, body AddmeetingFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatemeetingWithBody request with any body
	UpdatemeetingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Updatemeeting(ctx context.Context, body UpdatemeetingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatemeetingWithFormdataBody(ctx context.Context, body UpdatemeetingFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindmeetingsByStatus request
	FindmeetingsByStatus(ctx context.Context, params *FindmeetingsByStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindmeetingsByTags request
	FindmeetingsByTags(ctx context.Context, params *FindmeetingsByTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletemeeting request
	Deletemeeting(ctx context.Context, meetingId int64, params *DeletemeetingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetmeetingById request
	GetmeetingById(ctx context.Context, meetingId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatemeetingWithForm request
	UpdatemeetingWithForm(ctx context.Context, meetingId int64, params *UpdatemeetingWithFormParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadFileWithBody request with any body
	UploadFileWithBody(ctx context.Context, meetingId int64, params *UploadFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserWithBody request with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserWithFormdataBody(ctx context.Context, body CreateUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUsersWithListInputWithBody request with any body
	CreateUsersWithListInputWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUsersWithListInput(ctx context.Context, body CreateUsersWithListInputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginUser request
	LoginUser(ctx context.Context, params *LoginUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogoutUser request
	LogoutUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserByName request
	GetUserByName(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserWithBody request with any body
	UpdateUserWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUser(ctx context.Context, username string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserWithFormdataBody(ctx context.Context, username string, body UpdateUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AddmeetingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddmeetingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Addmeeting(ctx context.Context, body AddmeetingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddmeetingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddmeetingWithFormdataBody(ctx context.Context, body AddmeetingFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddmeetingRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatemeetingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatemeetingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Updatemeeting(ctx context.Context, body UpdatemeetingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatemeetingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatemeetingWithFormdataBody(ctx context.Context, body UpdatemeetingFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatemeetingRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindmeetingsByStatus(ctx context.Context, params *FindmeetingsByStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindmeetingsByStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindmeetingsByTags(ctx context.Context, params *FindmeetingsByTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindmeetingsByTagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletemeeting(ctx context.Context, meetingId int64, params *DeletemeetingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletemeetingRequest(c.Server, meetingId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetmeetingById(ctx context.Context, meetingId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetmeetingByIdRequest(c.Server, meetingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatemeetingWithForm(ctx context.Context, meetingId int64, params *UpdatemeetingWithFormParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatemeetingWithFormRequest(c.Server, meetingId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadFileWithBody(ctx context.Context, meetingId int64, params *UploadFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadFileRequestWithBody(c.Server, meetingId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithFormdataBody(ctx context.Context, body CreateUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUsersWithListInputWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUsersWithListInputRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUsersWithListInput(ctx context.Context, body CreateUsersWithListInputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUsersWithListInputRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginUser(ctx context.Context, params *LoginUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogoutUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogoutUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserByName(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserByNameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithBody(c.Server, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUser(ctx context.Context, username string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequest(c.Server, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserWithFormdataBody(ctx context.Context, username string, body UpdateUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithFormdataBody(c.Server, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAddmeetingRequest calls the generic Addmeeting builder with application/json body
func NewAddmeetingRequest(server string, body AddmeetingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddmeetingRequestWithBody(server, "application/json", bodyReader)
}

// NewAddmeetingRequestWithFormdataBody calls the generic Addmeeting builder with application/x-www-form-urlencoded body
func NewAddmeetingRequestWithFormdataBody(server string, body AddmeetingFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAddmeetingRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAddmeetingRequestWithBody generates requests for Addmeeting with any type of body
func NewAddmeetingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/meeting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdatemeetingRequest calls the generic Updatemeeting builder with application/json body
func NewUpdatemeetingRequest(server string, body UpdatemeetingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatemeetingRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdatemeetingRequestWithFormdataBody calls the generic Updatemeeting builder with application/x-www-form-urlencoded body
func NewUpdatemeetingRequestWithFormdataBody(server string, body UpdatemeetingFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdatemeetingRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdatemeetingRequestWithBody generates requests for Updatemeeting with any type of body
func NewUpdatemeetingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/meeting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindmeetingsByStatusRequest generates requests for FindmeetingsByStatus
func NewFindmeetingsByStatusRequest(server string, params *FindmeetingsByStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/meeting/findByStatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindmeetingsByTagsRequest generates requests for FindmeetingsByTags
func NewFindmeetingsByTagsRequest(server string, params *FindmeetingsByTagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/meeting/findByTags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletemeetingRequest generates requests for Deletemeeting
func NewDeletemeetingRequest(server string, meetingId int64, params *DeletemeetingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "meetingId", runtime.ParamLocationPath, meetingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/meeting/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, *params.ApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("api_key", headerParam0)
		}

	}

	return req, nil
}

// NewGetmeetingByIdRequest generates requests for GetmeetingById
func NewGetmeetingByIdRequest(server string, meetingId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "meetingId", runtime.ParamLocationPath, meetingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/meeting/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatemeetingWithFormRequest generates requests for UpdatemeetingWithForm
func NewUpdatemeetingWithFormRequest(server string, meetingId int64, params *UpdatemeetingWithFormParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "meetingId", runtime.ParamLocationPath, meetingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/meeting/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadFileRequestWithBody generates requests for UploadFile with any type of body
func NewUploadFileRequestWithBody(server string, meetingId int64, params *UploadFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "meetingId", runtime.ParamLocationPath, meetingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/meeting/%s/uploadImage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdditionalMetadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "additionalMetadata", runtime.ParamLocationQuery, *params.AdditionalMetadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithFormdataBody calls the generic CreateUser builder with application/x-www-form-urlencoded body
func NewCreateUserRequestWithFormdataBody(server string, body CreateUserFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateUserRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateUsersWithListInputRequest calls the generic CreateUsersWithListInput builder with application/json body
func NewCreateUsersWithListInputRequest(server string, body CreateUsersWithListInputJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUsersWithListInputRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUsersWithListInputRequestWithBody generates requests for CreateUsersWithListInput with any type of body
func NewCreateUsersWithListInputRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/createWithList")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginUserRequest generates requests for LoginUser
func NewLoginUserRequest(server string, params *LoginUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Password != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, *params.Password); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogoutUserRequest generates requests for LogoutUser
func NewLogoutUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserByNameRequest generates requests for GetUserByName
func NewGetUserByNameRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRequest calls the generic UpdateUser builder with application/json body
func NewUpdateUserRequest(server string, username string, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRequestWithBody(server, username, "application/json", bodyReader)
}

// NewUpdateUserRequestWithFormdataBody calls the generic UpdateUser builder with application/x-www-form-urlencoded body
func NewUpdateUserRequestWithFormdataBody(server string, username string, body UpdateUserFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdateUserRequestWithBody(server, username, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func NewUpdateUserRequestWithBody(server string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AddmeetingWithBodyWithResponse request with any body
	AddmeetingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddmeetingResponse, error)

	AddmeetingWithResponse(ctx context.Context, body AddmeetingJSONRequestBody, reqEditors ...RequestEditorFn) (*AddmeetingResponse, error)

	AddmeetingWithFormdataBodyWithResponse(ctx context.Context, body AddmeetingFormdataRequestBody, reqEditors ...RequestEditorFn) (*AddmeetingResponse, error)

	// UpdatemeetingWithBodyWithResponse request with any body
	UpdatemeetingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatemeetingResponse, error)

	UpdatemeetingWithResponse(ctx context.Context, body UpdatemeetingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatemeetingResponse, error)

	UpdatemeetingWithFormdataBodyWithResponse(ctx context.Context, body UpdatemeetingFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdatemeetingResponse, error)

	// FindmeetingsByStatusWithResponse request
	FindmeetingsByStatusWithResponse(ctx context.Context, params *FindmeetingsByStatusParams, reqEditors ...RequestEditorFn) (*FindmeetingsByStatusResponse, error)

	// FindmeetingsByTagsWithResponse request
	FindmeetingsByTagsWithResponse(ctx context.Context, params *FindmeetingsByTagsParams, reqEditors ...RequestEditorFn) (*FindmeetingsByTagsResponse, error)

	// DeletemeetingWithResponse request
	DeletemeetingWithResponse(ctx context.Context, meetingId int64, params *DeletemeetingParams, reqEditors ...RequestEditorFn) (*DeletemeetingResponse, error)

	// GetmeetingByIdWithResponse request
	GetmeetingByIdWithResponse(ctx context.Context, meetingId int64, reqEditors ...RequestEditorFn) (*GetmeetingByIdResponse, error)

	// UpdatemeetingWithFormWithResponse request
	UpdatemeetingWithFormWithResponse(ctx context.Context, meetingId int64, params *UpdatemeetingWithFormParams, reqEditors ...RequestEditorFn) (*UpdatemeetingWithFormResponse, error)

	// UploadFileWithBodyWithResponse request with any body
	UploadFileWithBodyWithResponse(ctx context.Context, meetingId int64, params *UploadFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadFileResponse, error)

	// CreateUserWithBodyWithResponse request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithFormdataBodyWithResponse(ctx context.Context, body CreateUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// CreateUsersWithListInputWithBodyWithResponse request with any body
	CreateUsersWithListInputWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUsersWithListInputResponse, error)

	CreateUsersWithListInputWithResponse(ctx context.Context, body CreateUsersWithListInputJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUsersWithListInputResponse, error)

	// LoginUserWithResponse request
	LoginUserWithResponse(ctx context.Context, params *LoginUserParams, reqEditors ...RequestEditorFn) (*LoginUserResponse, error)

	// LogoutUserWithResponse request
	LogoutUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutUserResponse, error)

	// DeleteUserWithResponse request
	DeleteUserWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// GetUserByNameWithResponse request
	GetUserByNameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetUserByNameResponse, error)

	// UpdateUserWithBodyWithResponse request with any body
	UpdateUserWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithResponse(ctx context.Context, username string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithFormdataBodyWithResponse(ctx context.Context, username string, body UpdateUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)
}

type AddmeetingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Meeting
	XML200       *Meeting
}

// Status returns HTTPResponse.Status
func (r AddmeetingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddmeetingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatemeetingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Meeting
	XML200       *Meeting
}

// Status returns HTTPResponse.Status
func (r UpdatemeetingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatemeetingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindmeetingsByStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Meeting
	XML200       *[]Meeting
}

// Status returns HTTPResponse.Status
func (r FindmeetingsByStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindmeetingsByStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindmeetingsByTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Meeting
	XML200       *[]Meeting
}

// Status returns HTTPResponse.Status
func (r FindmeetingsByTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindmeetingsByTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletemeetingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletemeetingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletemeetingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetmeetingByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Meeting
	XML200       *Meeting
}

// Status returns HTTPResponse.Status
func (r GetmeetingByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetmeetingByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatemeetingWithFormResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatemeetingWithFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatemeetingWithFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
}

// Status returns HTTPResponse.Status
func (r UploadFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *User
	XMLDefault   *User
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUsersWithListInputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	XML200       *User
}

// Status returns HTTPResponse.Status
func (r CreateUsersWithListInputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUsersWithListInputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
}

// Status returns HTTPResponse.Status
func (r LoginUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogoutUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogoutUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogoutUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	XML200       *User
}

// Status returns HTTPResponse.Status
func (r GetUserByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AddmeetingWithBodyWithResponse request with arbitrary body returning *AddmeetingResponse
func (c *ClientWithResponses) AddmeetingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddmeetingResponse, error) {
	rsp, err := c.AddmeetingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddmeetingResponse(rsp)
}

func (c *ClientWithResponses) AddmeetingWithResponse(ctx context.Context, body AddmeetingJSONRequestBody, reqEditors ...RequestEditorFn) (*AddmeetingResponse, error) {
	rsp, err := c.Addmeeting(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddmeetingResponse(rsp)
}

func (c *ClientWithResponses) AddmeetingWithFormdataBodyWithResponse(ctx context.Context, body AddmeetingFormdataRequestBody, reqEditors ...RequestEditorFn) (*AddmeetingResponse, error) {
	rsp, err := c.AddmeetingWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddmeetingResponse(rsp)
}

// UpdatemeetingWithBodyWithResponse request with arbitrary body returning *UpdatemeetingResponse
func (c *ClientWithResponses) UpdatemeetingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatemeetingResponse, error) {
	rsp, err := c.UpdatemeetingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatemeetingResponse(rsp)
}

func (c *ClientWithResponses) UpdatemeetingWithResponse(ctx context.Context, body UpdatemeetingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatemeetingResponse, error) {
	rsp, err := c.Updatemeeting(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatemeetingResponse(rsp)
}

func (c *ClientWithResponses) UpdatemeetingWithFormdataBodyWithResponse(ctx context.Context, body UpdatemeetingFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdatemeetingResponse, error) {
	rsp, err := c.UpdatemeetingWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatemeetingResponse(rsp)
}

// FindmeetingsByStatusWithResponse request returning *FindmeetingsByStatusResponse
func (c *ClientWithResponses) FindmeetingsByStatusWithResponse(ctx context.Context, params *FindmeetingsByStatusParams, reqEditors ...RequestEditorFn) (*FindmeetingsByStatusResponse, error) {
	rsp, err := c.FindmeetingsByStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindmeetingsByStatusResponse(rsp)
}

// FindmeetingsByTagsWithResponse request returning *FindmeetingsByTagsResponse
func (c *ClientWithResponses) FindmeetingsByTagsWithResponse(ctx context.Context, params *FindmeetingsByTagsParams, reqEditors ...RequestEditorFn) (*FindmeetingsByTagsResponse, error) {
	rsp, err := c.FindmeetingsByTags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindmeetingsByTagsResponse(rsp)
}

// DeletemeetingWithResponse request returning *DeletemeetingResponse
func (c *ClientWithResponses) DeletemeetingWithResponse(ctx context.Context, meetingId int64, params *DeletemeetingParams, reqEditors ...RequestEditorFn) (*DeletemeetingResponse, error) {
	rsp, err := c.Deletemeeting(ctx, meetingId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletemeetingResponse(rsp)
}

// GetmeetingByIdWithResponse request returning *GetmeetingByIdResponse
func (c *ClientWithResponses) GetmeetingByIdWithResponse(ctx context.Context, meetingId int64, reqEditors ...RequestEditorFn) (*GetmeetingByIdResponse, error) {
	rsp, err := c.GetmeetingById(ctx, meetingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetmeetingByIdResponse(rsp)
}

// UpdatemeetingWithFormWithResponse request returning *UpdatemeetingWithFormResponse
func (c *ClientWithResponses) UpdatemeetingWithFormWithResponse(ctx context.Context, meetingId int64, params *UpdatemeetingWithFormParams, reqEditors ...RequestEditorFn) (*UpdatemeetingWithFormResponse, error) {
	rsp, err := c.UpdatemeetingWithForm(ctx, meetingId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatemeetingWithFormResponse(rsp)
}

// UploadFileWithBodyWithResponse request with arbitrary body returning *UploadFileResponse
func (c *ClientWithResponses) UploadFileWithBodyWithResponse(ctx context.Context, meetingId int64, params *UploadFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadFileResponse, error) {
	rsp, err := c.UploadFileWithBody(ctx, meetingId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadFileResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithFormdataBodyWithResponse(ctx context.Context, body CreateUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// CreateUsersWithListInputWithBodyWithResponse request with arbitrary body returning *CreateUsersWithListInputResponse
func (c *ClientWithResponses) CreateUsersWithListInputWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUsersWithListInputResponse, error) {
	rsp, err := c.CreateUsersWithListInputWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUsersWithListInputResponse(rsp)
}

func (c *ClientWithResponses) CreateUsersWithListInputWithResponse(ctx context.Context, body CreateUsersWithListInputJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUsersWithListInputResponse, error) {
	rsp, err := c.CreateUsersWithListInput(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUsersWithListInputResponse(rsp)
}

// LoginUserWithResponse request returning *LoginUserResponse
func (c *ClientWithResponses) LoginUserWithResponse(ctx context.Context, params *LoginUserParams, reqEditors ...RequestEditorFn) (*LoginUserResponse, error) {
	rsp, err := c.LoginUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginUserResponse(rsp)
}

// LogoutUserWithResponse request returning *LogoutUserResponse
func (c *ClientWithResponses) LogoutUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutUserResponse, error) {
	rsp, err := c.LogoutUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogoutUserResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// GetUserByNameWithResponse request returning *GetUserByNameResponse
func (c *ClientWithResponses) GetUserByNameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetUserByNameResponse, error) {
	rsp, err := c.GetUserByName(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserByNameResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *ClientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithResponse(ctx context.Context, username string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithFormdataBodyWithResponse(ctx context.Context, username string, body UpdateUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithFormdataBody(ctx, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

// ParseAddmeetingResponse parses an HTTP response from a AddmeetingWithResponse call
func ParseAddmeetingResponse(rsp *http.Response) (*AddmeetingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddmeetingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Meeting
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Meeting
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseUpdatemeetingResponse parses an HTTP response from a UpdatemeetingWithResponse call
func ParseUpdatemeetingResponse(rsp *http.Response) (*UpdatemeetingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatemeetingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Meeting
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Meeting
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseFindmeetingsByStatusResponse parses an HTTP response from a FindmeetingsByStatusWithResponse call
func ParseFindmeetingsByStatusResponse(rsp *http.Response) (*FindmeetingsByStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindmeetingsByStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Meeting
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest []Meeting
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseFindmeetingsByTagsResponse parses an HTTP response from a FindmeetingsByTagsWithResponse call
func ParseFindmeetingsByTagsResponse(rsp *http.Response) (*FindmeetingsByTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindmeetingsByTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Meeting
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest []Meeting
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseDeletemeetingResponse parses an HTTP response from a DeletemeetingWithResponse call
func ParseDeletemeetingResponse(rsp *http.Response) (*DeletemeetingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletemeetingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetmeetingByIdResponse parses an HTTP response from a GetmeetingByIdWithResponse call
func ParseGetmeetingByIdResponse(rsp *http.Response) (*GetmeetingByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetmeetingByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Meeting
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Meeting
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseUpdatemeetingWithFormResponse parses an HTTP response from a UpdatemeetingWithFormWithResponse call
func ParseUpdatemeetingWithFormResponse(rsp *http.Response) (*UpdatemeetingWithFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatemeetingWithFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUploadFileResponse parses an HTTP response from a UploadFileWithResponse call
func ParseUploadFileResponse(rsp *http.Response) (*UploadFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest User
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	}

	return response, nil
}

// ParseCreateUsersWithListInputResponse parses an HTTP response from a CreateUsersWithListInputWithResponse call
func ParseCreateUsersWithListInputResponse(rsp *http.Response) (*CreateUsersWithListInputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUsersWithListInputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest User
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseLoginUserResponse parses an HTTP response from a LoginUserWithResponse call
func ParseLoginUserResponse(rsp *http.Response) (*LoginUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseLogoutUserResponse parses an HTTP response from a LogoutUserWithResponse call
func ParseLogoutUserResponse(rsp *http.Response) (*LogoutUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogoutUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserByNameResponse parses an HTTP response from a GetUserByNameWithResponse call
func ParseGetUserByNameResponse(rsp *http.Response) (*GetUserByNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest User
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func ParseUpdateUserResponse(rsp *http.Response) (*UpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new meeting to the visitor
	// (POST /meeting)
	Addmeeting(w http.ResponseWriter, r *http.Request)
	// Update an existing meeting
	// (PUT /meeting)
	Updatemeeting(w http.ResponseWriter, r *http.Request)
	// Finds meetings by status
	// (GET /meeting/findByStatus)
	FindmeetingsByStatus(w http.ResponseWriter, r *http.Request, params FindmeetingsByStatusParams)
	// Finds meetings by tags
	// (GET /meeting/findByTags)
	FindmeetingsByTags(w http.ResponseWriter, r *http.Request, params FindmeetingsByTagsParams)
	// Deletes a meeting
	// (DELETE /meeting/{meetingId})
	Deletemeeting(w http.ResponseWriter, r *http.Request, meetingId int64, params DeletemeetingParams)
	// Find meeting by ID
	// (GET /meeting/{meetingId})
	GetmeetingById(w http.ResponseWriter, r *http.Request, meetingId int64)
	// Updates a meeting in the visitor with form data
	// (POST /meeting/{meetingId})
	UpdatemeetingWithForm(w http.ResponseWriter, r *http.Request, meetingId int64, params UpdatemeetingWithFormParams)
	// uploads an image
	// (POST /meeting/{meetingId}/uploadImage)
	UploadFile(w http.ResponseWriter, r *http.Request, meetingId int64, params UploadFileParams)
	// Create user
	// (POST /user)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Creates list of users with given input array
	// (POST /user/createWithList)
	CreateUsersWithListInput(w http.ResponseWriter, r *http.Request)
	// Logs user into the system
	// (GET /user/login)
	LoginUser(w http.ResponseWriter, r *http.Request, params LoginUserParams)
	// Logs out current logged in user session
	// (GET /user/logout)
	LogoutUser(w http.ResponseWriter, r *http.Request)
	// Delete user
	// (DELETE /user/{username})
	DeleteUser(w http.ResponseWriter, r *http.Request, username string)
	// Get user by user name
	// (GET /user/{username})
	GetUserByName(w http.ResponseWriter, r *http.Request, username string)
	// Update user
	// (PUT /user/{username})
	UpdateUser(w http.ResponseWriter, r *http.Request, username string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Add a new meeting to the visitor
// (POST /meeting)
func (_ Unimplemented) Addmeeting(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing meeting
// (PUT /meeting)
func (_ Unimplemented) Updatemeeting(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Finds meetings by status
// (GET /meeting/findByStatus)
func (_ Unimplemented) FindmeetingsByStatus(w http.ResponseWriter, r *http.Request, params FindmeetingsByStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Finds meetings by tags
// (GET /meeting/findByTags)
func (_ Unimplemented) FindmeetingsByTags(w http.ResponseWriter, r *http.Request, params FindmeetingsByTagsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a meeting
// (DELETE /meeting/{meetingId})
func (_ Unimplemented) Deletemeeting(w http.ResponseWriter, r *http.Request, meetingId int64, params DeletemeetingParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find meeting by ID
// (GET /meeting/{meetingId})
func (_ Unimplemented) GetmeetingById(w http.ResponseWriter, r *http.Request, meetingId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates a meeting in the visitor with form data
// (POST /meeting/{meetingId})
func (_ Unimplemented) UpdatemeetingWithForm(w http.ResponseWriter, r *http.Request, meetingId int64, params UpdatemeetingWithFormParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// uploads an image
// (POST /meeting/{meetingId}/uploadImage)
func (_ Unimplemented) UploadFile(w http.ResponseWriter, r *http.Request, meetingId int64, params UploadFileParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create user
// (POST /user)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates list of users with given input array
// (POST /user/createWithList)
func (_ Unimplemented) CreateUsersWithListInput(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Logs user into the system
// (GET /user/login)
func (_ Unimplemented) LoginUser(w http.ResponseWriter, r *http.Request, params LoginUserParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Logs out current logged in user session
// (GET /user/logout)
func (_ Unimplemented) LogoutUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete user
// (DELETE /user/{username})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by user name
// (GET /user/{username})
func (_ Unimplemented) GetUserByName(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user
// (PUT /user/{username})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Addmeeting operation middleware
func (siw *ServerInterfaceWrapper) Addmeeting(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Meetingvisitor_authScopes, []string{"write:meetings", "read:meetings"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Addmeeting(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Updatemeeting operation middleware
func (siw *ServerInterfaceWrapper) Updatemeeting(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Meetingvisitor_authScopes, []string{"write:meetings", "read:meetings"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Updatemeeting(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FindmeetingsByStatus operation middleware
func (siw *ServerInterfaceWrapper) FindmeetingsByStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Meetingvisitor_authScopes, []string{"write:meetings", "read:meetings"})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindmeetingsByStatusParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindmeetingsByStatus(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FindmeetingsByTags operation middleware
func (siw *ServerInterfaceWrapper) FindmeetingsByTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Meetingvisitor_authScopes, []string{"write:meetings", "read:meetings"})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindmeetingsByTagsParams

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindmeetingsByTags(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Deletemeeting operation middleware
func (siw *ServerInterfaceWrapper) Deletemeeting(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meetingId" -------------
	var meetingId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "meetingId", runtime.ParamLocationPath, chi.URLParam(r, "meetingId"), &meetingId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meetingId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Meetingvisitor_authScopes, []string{"write:meetings", "read:meetings"})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeletemeetingParams

	headers := r.Header

	// ------------- Optional header parameter "api_key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("api_key")]; found {
		var ApiKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "api_key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, valueList[0], &ApiKey)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "api_key", Err: err})
			return
		}

		params.ApiKey = &ApiKey

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Deletemeeting(w, r, meetingId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetmeetingById operation middleware
func (siw *ServerInterfaceWrapper) GetmeetingById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meetingId" -------------
	var meetingId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "meetingId", runtime.ParamLocationPath, chi.URLParam(r, "meetingId"), &meetingId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meetingId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	ctx = context.WithValue(ctx, Meetingvisitor_authScopes, []string{"write:meetings", "read:meetings"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetmeetingById(w, r, meetingId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdatemeetingWithForm operation middleware
func (siw *ServerInterfaceWrapper) UpdatemeetingWithForm(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meetingId" -------------
	var meetingId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "meetingId", runtime.ParamLocationPath, chi.URLParam(r, "meetingId"), &meetingId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meetingId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Meetingvisitor_authScopes, []string{"write:meetings", "read:meetings"})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdatemeetingWithFormParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatemeetingWithForm(w, r, meetingId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UploadFile operation middleware
func (siw *ServerInterfaceWrapper) UploadFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meetingId" -------------
	var meetingId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "meetingId", runtime.ParamLocationPath, chi.URLParam(r, "meetingId"), &meetingId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meetingId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Meetingvisitor_authScopes, []string{"write:meetings", "read:meetings"})

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadFileParams

	// ------------- Optional query parameter "additionalMetadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "additionalMetadata", r.URL.Query(), &params.AdditionalMetadata)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "additionalMetadata", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadFile(w, r, meetingId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUsersWithListInput operation middleware
func (siw *ServerInterfaceWrapper) CreateUsersWithListInput(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUsersWithListInput(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LoginUserParams

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// ------------- Optional query parameter "password" -------------

	err = runtime.BindQueryParameter("form", true, false, "password", r.URL.Query(), &params.Password)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "password", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogoutUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserByName operation middleware
func (siw *ServerInterfaceWrapper) GetUserByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserByName(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/meeting", wrapper.Addmeeting)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/meeting", wrapper.Updatemeeting)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/meeting/findByStatus", wrapper.FindmeetingsByStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/meeting/findByTags", wrapper.FindmeetingsByTags)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/meeting/{meetingId}", wrapper.Deletemeeting)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/meeting/{meetingId}", wrapper.GetmeetingById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/meeting/{meetingId}", wrapper.UpdatemeetingWithForm)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/meeting/{meetingId}/uploadImage", wrapper.UploadFile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/createWithList", wrapper.CreateUsersWithListInput)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/login", wrapper.LoginUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/logout", wrapper.LogoutUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/{username}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/{username}", wrapper.GetUserByName)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user/{username}", wrapper.UpdateUser)
	})

	return r
}
